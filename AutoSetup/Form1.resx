<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AH//AAD//8AD///wD////////////w==
</value>
  </data>
</root>